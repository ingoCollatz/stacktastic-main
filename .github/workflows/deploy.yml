name: Deploy stacktastic

on:
  push:
    branches:
      - main
      - staging

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security tests
        run: npm run test:deployment

      - name: Run build test
        run: npm run build

      - name: Test deployment readiness
        run: |
          echo "‚úÖ All tests passed - deployment ready"
          echo "üìä Test Summary:"
          echo "  - Security tests: ‚úÖ"
          echo "  - Rate limiting tests: ‚úÖ" 
          echo "  - Integration tests: ‚úÖ"
          echo "  - Build test: ‚úÖ"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build --pull -t stacktastic-${{ github.ref_name }}:${{ github.sha }} .
          docker save stacktastic-${{ github.ref_name }}:${{ github.sha }} | gzip > image.tar.gz

      - name: Copy image and docker-compose to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "image.tar.gz,docker-compose.${{ github.ref_name }}.yml"
          target: "~/stacktastic/${{ github.ref_name }}/"

      - name: SSH and deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            cd ~/stacktastic/${{ github.ref_name }}
            gunzip -f image.tar.gz
            docker load < image.tar

            CONTACT_RECEIVER="${{ secrets.CONTACT_RECEIVER }}" \
            MAIL_HOST="${{ secrets.MAIL_HOST }}" \
            MAIL_PORT="${{ secrets.MAIL_PORT }}" \
            MAIL_SECURE="${{ secrets.MAIL_SECURE }}" \
            MAIL_USER="${{ secrets.MAIL_USER }}" \
            MAIL_PASS="${{ secrets.MAIL_PASS }}" \
            CAPTCHA_SECRET="${{ secrets.CAPTCHA_SECRET }}" \
            VITE_CAPTCHA_SECRET="${{ secrets.VITE_CAPTCHA_SECRET }}" \
            CSRF_SECRET="${{ secrets.CSRF_SECRET }}" \
            IMAGE_TAG=${{ github.sha }} docker-compose -f docker-compose.${{ github.ref_name }}.yml up -d --force-recreate

            rm -f image.tar

            echo "‚è≥ Waiting for services to start..."
            sleep 30

            if [ "${{ github.ref_name }}" = "main" ]; then
              HEALTH_URL="https://stacktastic.dev"
            else
              HEALTH_URL="https://staging.stacktastic.dev"
            fi

            echo "üîç Testing deployment at $HEALTH_URL"

            if curl -f -s "$HEALTH_URL" > /dev/null; then
              echo "‚úÖ Site is accessible"
            else
              echo "‚ùå Site accessibility test failed"
              exit 1
            fi

            echo "üöÄ Deployment completed successfully!"
